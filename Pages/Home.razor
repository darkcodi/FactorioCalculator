@page "/"
@using FactorioCalculator.Services
@using FactorioCalculator.Models
@inject BasePlan BasePlan

<PageTitle>FactorioCalculator</PageTitle>

@* Form to add new factory *@
@* This form should contain a plus button to add new inputs and outputs *@
<form class="form-inline" style="background-color: lightgray;" @onsubmit="AddFactory">
    <h2>Add new factory</h2>
    <div class="form-group">
        <label for="factoryName">Name</label>
        <input type="text" class="form-control" id="factoryName" placeholder="Name" @bind="NewFactoryName"/>
    </div>
    @* Inputs list *@
    <div class="form-group">
        <label for="factoryInputs">Inputs</label>
        <div id="factoryInputs">
            @foreach (var input in NewFactoryInputs)
            {
                <div class="input-group">
                    <input type="number" class="form-control" placeholder="Amount" @bind="input.Amount"/>
                    <input type="text" class="form-control" placeholder="Resource" @bind="input.Resource"/>
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button">Remove</button>
                    </div>
                </div>
            }
        </div>
        <button type="button" class="btn btn-outline-secondary" @onclick="() => NewFactoryInputs.Add(new ResourceAmount(string.Empty, 0))">Add input</button>
    </div>
    <button type="submit" class="btn btn-primary">Add</button>
</form>


@* List of all factories *@
<br/>
<h2>Factories</h2>
@if (BasePlan.Factories.Count > 0)
{
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>Name</th>
            <th>Count</th>
            <th>Inputs</th>
            <th>Outputs</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var (factory, count) in BasePlan.Factories)
        {
            <tr>
                <td>@factory.Name</td>
                <td>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => BasePlan.DecreaseFactoryCount(factory.Name)">-</button>
                    @count
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => BasePlan.IncreaseFactoryCount(factory.Name)">+</button>
                </td>
                <td>
                    @foreach (var input in factory.Inputs)
                    {
                        var bgColor = ColorGenerator.GetBackgroundColorForText(input.Resource);
                        var fgColor = ColorGenerator.GetForegroundColorForColor(bgColor);
                        <span class="badge" style="background-color: @bgColor; color: @fgColor; margin-right: 10px;">@input.Amount @input.Resource</span>
                    }
                </td>
                <td>
                    @foreach (var output in factory.Outputs)
                    {
                        var bgColor = ColorGenerator.GetBackgroundColorForText(output.Resource);
                        var fgColor = ColorGenerator.GetForegroundColorForColor(bgColor);
                        <span class="badge" style="background-color: @bgColor; color: @fgColor; margin-right: 10px;">@output.Amount @output.Resource</span>
                    }
                </td>
                <td>
                    <button class="btn btn-outline-secondary" type="button" @onclick="() => BasePlan.RemoveFactory(factory.Name)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>No factories found.</p>
}

@* List of all resources *@
<br/>
<h2>Resources</h2>

@if (BasePlan.Resources.Count > 0)
{
    <table class="table table-striped table-hover">
        <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var (resource, amount) in BasePlan.Resources)
        {
            <tr>
                <td>@resource</td>
                <td>@amount</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>No resources found.</p>
}

@code {
    public string NewFactoryName { get; set; }
    public List<ResourceAmount> NewFactoryInputs { get; set; } = new();
    public List<ResourceAmount> NewFactoryOutputs { get; set; } = new();

    public void AddFactory()
    {
        var inputs = NewFactoryInputs.Where(x => x.Amount != 0 && !string.IsNullOrWhiteSpace(x.Resource)).ToList();
        var outputs = NewFactoryOutputs.Where(x => x.Amount != 0 && !string.IsNullOrWhiteSpace(x.Resource)).ToList();
        var factory = new Factory(NewFactoryName) { Inputs = inputs, Outputs = outputs };
        BasePlan.AddFactory(factory);
        ResetNewFactoryForm();
    }

    public void ResetNewFactoryForm()
    {
        NewFactoryName = "";
        NewFactoryInputs = new();
        NewFactoryOutputs = new();
    }
}