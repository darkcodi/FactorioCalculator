@page "/"
@using FactorioCalculator.Services
@using FactorioCalculator.Models
@inject BasePlan BasePlan

<PageTitle>FactorioCalculator</PageTitle>

@* Form to add new factory *@
@* This form should contain a plus button to add new inputs and outputs *@
<form class="form-inline" style="background-color: lightgray;" @onsubmit="AddFactory">
    <h2>Add new factory</h2>
    <div class="form-group">
        <label for="factoryName">Name</label>
        <input type="text" class="form-control" id="factoryName" placeholder="Name" @bind="NewFactoryName"/>
    </div>
    @* Inputs list *@
    <div class="form-group">
        <label for="factoryInputs">Inputs</label>
        <div id="factoryInputs">
            @for (var i = 0; i < NewFactoryInputs.Count; i++)
            {
                var input = NewFactoryInputs[i];
                <div class="input-group">
                    <input type="number" class="form-control" placeholder="Amount" @bind="input.Amount"/>
                    <input type="text" class="form-control" placeholder="Resource" @bind="input.Resource"/>
                    <div class="input-group-append">
                        @{ var index = i; }
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => NewFactoryInputs.RemoveAt(index)">Remove</button>
                    </div>
                </div>
            }
        </div>
        <button type="button" class="btn btn-outline-secondary" @onclick="() => NewFactoryInputs.Add(new ResourceAmount(string.Empty, 0))">Add input</button>
    </div>
    @* Outputs list *@
    <div class="form-group">
        <label for="factoryOutputs">Outputs</label>
        <div id="factoryOutputs">
            @for (var i = 0; i < NewFactoryOutputs.Count; i++)
            {
                var output = NewFactoryOutputs[i];
                <div class="input-group">
                    <input type="number" class="form-control" placeholder="Amount" @bind="output.Amount"/>
                    <input type="text" class="form-control" placeholder="Resource" @bind="output.Resource"/>
                    <div class="input-group-append">
                        @{ var index = i; }
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => NewFactoryOutputs.RemoveAt(index)">Remove</button>
                    </div>
                </div>
            }
        </div>
        <button type="button" class="btn btn-outline-secondary" @onclick="() => NewFactoryOutputs.Add(new ResourceAmount(string.Empty, 0))">Add output</button>
    </div>
    <button type="submit" class="btn btn-primary">Add</button>
</form>


@* Split the page into 2 panels, one for the factories (on the left) and one for the resources (on the right). *@
<br/>
<div class="row">
    <div class="col-md-6">
        @* List of all factories *@
        <h2>Factories</h2>
        @if (BasePlan.Factories.Count > 0)
        {
            <table class="table table-striped table-hover">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Count</th>
                    <th>Inputs</th>
                    <th>Outputs</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (factory, count) in BasePlan.Factories)
                {
                    <tr>
                        <td>@factory.Name</td>
                        <td>
                            <button class="btn btn-outline-secondary" type="button" @onclick="() => BasePlan.DecreaseFactoryCount(factory.Name)">-</button>
                            @count
                            <button class="btn btn-outline-secondary" type="button" @onclick="() => BasePlan.IncreaseFactoryCount(factory.Name)">+</button>
                        </td>
                        <td>
                            @foreach (var input in factory.Inputs)
                            {
                                var bgColor = ColorGenerator.GetBackgroundColorForText(input.Resource);
                                var fgColor = ColorGenerator.GetForegroundColorForColor(bgColor);
                                <span class="badge" style="background-color: @bgColor; color: @fgColor; margin-right: 10px;">@input.Amount @input.Resource</span>
                            }
                        </td>
                        <td>
                            @foreach (var output in factory.Outputs)
                            {
                                var bgColor = ColorGenerator.GetBackgroundColorForText(output.Resource);
                                var fgColor = ColorGenerator.GetForegroundColorForColor(bgColor);
                                <span class="badge" style="background-color: @bgColor; color: @fgColor; margin-right: 10px;">@output.Amount @output.Resource</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-outline-secondary" type="button" @onclick="() => BasePlan.RemoveFactory(factory.Name)">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <p>No factories found.</p>
        }
    </div>
    <div class="col-md-6">
        @* List of all resources *@
        <h2>Resources</h2>
        @if (BasePlan.Resources.Count > 0)
        {
            <table class="table table-striped table-hover">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Amount</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (resource, amount) in BasePlan.Resources)
                {
                    <tr>
                        <td>@resource</td>
                        <td>@amount</td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <p>No resources found.</p>
        }
    </div>
</div>

@code {
    public string NewFactoryName { get; set; }
    public List<ResourceAmount> NewFactoryInputs { get; set; } = new();
    public List<ResourceAmount> NewFactoryOutputs { get; set; } = new();

    public void AddFactory()
    {
        var inputs = NewFactoryInputs.Where(x => x.Amount != 0 && !string.IsNullOrWhiteSpace(x.Resource)).ToList();
        var outputs = NewFactoryOutputs.Where(x => x.Amount != 0 && !string.IsNullOrWhiteSpace(x.Resource)).ToList();
        var factory = new Factory(NewFactoryName) { Inputs = inputs, Outputs = outputs };
        BasePlan.AddFactory(factory);
        ResetNewFactoryForm();
    }

    public void ResetNewFactoryForm()
    {
        NewFactoryName = "";
        NewFactoryInputs = new();
        NewFactoryOutputs = new();
    }
}